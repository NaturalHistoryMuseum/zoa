{"version":3,"file":"DateSimple-71d0c52f.js","sources":["../../src/components/inputs/date/DateSimple.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[$style.grid, $style[`grid--${labelPosition}`]]\"\n    :id=\"componentId\"\n  >\n    <label\n      :for=\"subId('date')\"\n      v-if=\"label && labelPosition !== 'none'\"\n      :class=\"[$style.label, $style[`label--${labelPosition}`]]\"\n    >\n      {{ label }}\n    </label>\n    <input\n      type=\"date\"\n      :placeholder=\"placeholder\"\n      :min=\"min\"\n      :max=\"max\"\n      :step=\"step\"\n      :id=\"subId('date')\"\n      :class=\"$style.input\"\n      v-model=\"value\"\n    />\n  </div>\n</template>\n\n<script setup>\nimport { useComponentId } from '../../utils/compid.js';\nimport { useChangeEmits } from '../common.js';\n\nconst props = defineProps({\n  /**\n   * @model\n   */\n  modelValue: {\n    type: Object,\n  },\n  /**\n   * Text for the input label.\n   */\n  label: {\n    type: String,\n    default: 'Date',\n  },\n  /**\n   * Position of the input label (or none).\n   * @values left, right, above, below, none\n   */\n  labelPosition: {\n    type: String,\n    default: 'above',\n  },\n  /**\n   * Debounce delay for the `change` event, in ms.\n   */\n  delay: {\n    type: Number,\n    default: 200,\n  },\n  /**\n   * Text to display in the blank input.\n   */\n  placeholder: {\n    type: String,\n    default: null,\n  },\n  /**\n   * The earliest accepted date, in yyyy-mm-dd format.\n   */\n  min: {\n    type: String,\n    default: null,\n  },\n  /**\n   * The latest accepted date, in yyyy-mm-dd format.\n   */\n  max: {\n    type: String,\n    default: null,\n  },\n  /**\n   * The increment size (in days) from the minimum date; e.g. 2 would make every other day valid. `'any'` allows all values.\n   */\n  step: {\n    type: [String, Number],\n    default: 'any',\n  },\n});\n\nconst { componentId, subId } = useComponentId();\n\nconst emit = defineEmits([\n  /**\n   * Emitted when the value changes; debounced if the delay prop is > 0.\n   * @arg {string} newValue the new value\n   */\n  'change',\n  /**\n   * @ignore\n   */\n  'update:modelValue',\n]);\nconst { value } = useChangeEmits(emit, props);\n</script>\n\n<style module lang=\"scss\">\n@import '../inputs';\n\n.input:invalid {\n  border-color: $error-dark;\n}\n</style>\n"],"names":["componentId","subId","useComponentId","value","useChangeEmits","emit","props"],"mappings":"qgCAwFM,CAAE,YAAAA,EAAa,MAAAC,GAAUC,IAazB,CAAE,MAAAC,CAAK,EAAKC,EAAeC,EAAMC,CAAK"}