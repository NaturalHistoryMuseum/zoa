{"version":3,"file":"Checkbox-d48cabb4.js","sources":["../../src/components/inputs/checkbox/Checkbox.vue"],"sourcesContent":["<template>\n  <label\n    :id=\"componentId\"\n    :for=\"subId('checkbox')\"\n    :class=\"[$style.grid, $style[`grid--${labelPosition}`]]\"\n    tabindex=\"0\"\n    ref=\"checkboxContainer\"\n  >\n    <span\n      v-if=\"label && labelPosition !== 'none'\"\n      :class=\"[$style.label, $style[`label--${labelPosition}`]]\"\n    >\n      {{ label }}\n    </span>\n    <input\n      type=\"checkbox\"\n      :id=\"subId('checkbox')\"\n      :class=\"$style.defaultCheckbox\"\n      v-model=\"value\"\n      :name=\"name\"\n      :value=\"_checkValue\"\n      ref=\"checkboxInput\"\n    />\n    <span :class=\"$style.checkbox\">\n      <font-awesome-icon icon=\"fa-solid fa-check\" :class=\"$style.check\" />\n    </span>\n  </label>\n</template>\n\n<script setup>\nimport { useComponentId } from '../../utils/compid.js';\nimport FontAwesomeIcon from '../../../icons.js';\nimport { useChangeEmits } from '../common.js';\nimport { useFocusWithin, onKeyStroke } from '@vueuse/core';\nimport { ref, computed, isProxy, toRaw } from 'vue';\n\nconst props = defineProps({\n  /**\n   * @model\n   */\n  modelValue: {\n    type: [Boolean, Array],\n    default: false,\n  },\n  /**\n   * Text for the input label.\n   */\n  label: {\n    type: String,\n    default: 'Checkbox',\n  },\n  /**\n   * Position of the input label (or none).\n   * @values left, right, above, below, none\n   */\n  labelPosition: {\n    type: String,\n    default: 'left',\n  },\n  /**\n   * Debounce delay for the `change` event, in ms.\n   */\n  delay: {\n    type: Number,\n    default: 0,\n  },\n  /**\n   * An optional name for the checkbox; useful if making a group.\n   */\n  name: {\n    type: [String, null],\n    default: null,\n  },\n  /**\n   * An optional alternative value for the checkbox to return. If not specified,\n   * the label value will be used.\n   */\n  checkValue: {\n    type: [String, null],\n    default: null,\n  },\n});\n\nconst { componentId, subId } = useComponentId();\n\nconst emit = defineEmits([\n  /**\n   * Emitted when the value changes; debounced if the delay prop is > 0.\n   * @arg {boolean} newValue the new value\n   */\n  'change',\n  /**\n   * @ignore\n   */\n  'update:modelValue',\n]);\nconst { value } = useChangeEmits(emit, props);\n\nconst checkboxContainer = ref(null);\nconst checkboxInput = ref(null);\nconst focus = useFocusWithin(checkboxContainer);\n\n// for convenience and consistency\nconst _checkValue = computed(() => {\n  return props.checkValue || props.label;\n});\n\nonKeyStroke(' ', () => {\n  if (focus.focused.value) {\n    // if the same v-model is set on a group of checkboxes, they return an array\n    // of their _checkValue values instead of a single boolean. There may be a\n    // better way to check for this.\n    let currentValue = isProxy(value.value) ? toRaw(value.value) : value.value;\n    if (Array.isArray(currentValue)) {\n      // if it's currently unchecked, we want to check it, and vice versa\n      let check = !checkboxInput.value.checked;\n      // double-check the value isn't on there already\n      currentValue = currentValue.filter((v) => v !== _checkValue.value);\n      if (check) {\n        currentValue.push(_checkValue.value);\n      }\n      value.value = currentValue;\n      checkboxInput.value.checked = check;\n    } else {\n      value.value = !value.value;\n    }\n  }\n});\n</script>\n\n<style module lang=\"scss\">\n@import '../inputs';\n\n.grid {\n  justify-items: center;\n\n  &.grid--left {\n    grid-template-columns: auto min-content;\n  }\n  &.grid--right {\n    grid-template-columns: min-content auto;\n  }\n}\n\n.label--right {\n  justify-self: left;\n}\n.label--left {\n  justify-self: right;\n}\n\n.defaultCheckbox {\n  display: none;\n}\n\n.label {\n  cursor: pointer;\n}\n\n.checkbox {\n  height: 1.5em;\n  width: 1.5em;\n  cursor: pointer;\n  background: white;\n  border: 1px solid $grey;\n  border-radius: $rounding;\n  position: relative;\n\n  .defaultCheckbox:checked ~ & {\n    background: $primary-a;\n\n    & > .check {\n      display: block;\n    }\n  }\n}\n\n.check {\n  display: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  margin: auto;\n}\n</style>\n"],"names":["componentId","subId","useComponentId","value","useChangeEmits","emit","props","checkboxContainer","ref","checkboxInput","focus","useFocusWithin","_checkValue","computed","onKeyStroke","currentValue","isProxy","toRaw","check","v"],"mappings":"kuCAmFM,CAAE,YAAAA,EAAa,MAAAC,GAAUC,IAazB,CAAE,MAAAC,CAAK,EAAKC,EAAeC,EAAMC,CAAK,EAEtCC,EAAoBC,EAAI,IAAI,EAC5BC,EAAgBD,EAAI,IAAI,EACxBE,EAAQC,EAAeJ,CAAiB,EAGxCK,EAAcC,EAAS,IACpBP,EAAM,YAAcA,EAAM,KAClC,EAED,OAAAQ,EAAY,IAAK,IAAM,CACrB,GAAIJ,EAAM,QAAQ,MAAO,CAIvB,IAAIK,EAAeC,EAAQb,EAAM,KAAK,EAAIc,EAAMd,EAAM,KAAK,EAAIA,EAAM,MACrE,GAAI,MAAM,QAAQY,CAAY,EAAG,CAE/B,IAAIG,EAAQ,CAACT,EAAc,MAAM,QAEjCM,EAAeA,EAAa,OAAQI,GAAMA,IAAMP,EAAY,KAAK,EAC7DM,GACFH,EAAa,KAAKH,EAAY,KAAK,EAErCT,EAAM,MAAQY,EACdN,EAAc,MAAM,QAAUS,CACpC,MACMf,EAAM,MAAQ,CAACA,EAAM,KAExB,CACH,CAAC;"}