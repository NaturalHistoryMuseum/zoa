{"version":3,"file":"Dropdown-d8430b14.js","sources":["../../src/components/inputs/dropdown/Dropdown.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[$style.grid, $style[`grid--${labelPosition}`]]\"\n    :id=\"componentId\"\n  >\n    <label\n      :for=\"subId('dropdown')\"\n      v-if=\"label && labelPosition !== 'none'\"\n      :class=\"[$style.label, $style[`label--${labelPosition}`]]\"\n    >\n      {{ label }}\n    </label>\n    <div :class=\"$style.wrapper\">\n      <select :id=\"subId('dropdown')\" :class=\"$style.input\" v-model=\"value\">\n        <option :value=\"null\">{{ placeholder }}</option>\n        <option v-for=\"opt in dropdownOptions\" :value=\"opt.value\">\n          {{ opt.label }}\n        </option>\n      </select>\n      <font-awesome-icon icon=\"fa-solid fa-caret-down\" :class=\"$style.arrow\" />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useComponentId } from '../../utils/compid.js';\nimport { computed } from 'vue';\nimport FontAwesomeIcon from '../../../icons.js';\nimport { useChangeEmits } from '../common.js';\n\nconst props = defineProps({\n  /**\n   * @model\n   */\n  modelValue: {\n    type: String,\n  },\n  /**\n   * Text for the input label.\n   */\n  label: {\n    type: String,\n    default: 'Dropdown',\n  },\n  /**\n   * Position of the input label (or none).\n   * @values left, right, above, below, none\n   */\n  labelPosition: {\n    type: String,\n    default: 'above',\n  },\n  /**\n   * Debounce delay for the `change` event, in ms.\n   */\n  delay: {\n    type: Number,\n    default: 0,\n  },\n  /**\n   * Text to display in the blank input.\n   */\n  placeholder: {\n    type: String,\n    default: 'Please choose an option',\n  },\n  /**\n   * The options available to select. Each item can be a string, or an object with `label` and `value` keys.\n   */\n  options: {\n    type: Array,\n  },\n});\n\nconst { componentId, subId } = useComponentId();\n\nconst dropdownOptions = computed(() => {\n  let outputOptions = [];\n  props.options.forEach((o) => {\n    if (typeof o === 'object') {\n      outputOptions.push({ label: o.label, value: o.value });\n    } else {\n      outputOptions.push({ label: o, value: o });\n    }\n  });\n  return outputOptions;\n});\n\nconst emit = defineEmits([\n  /**\n   * Emitted when the value changes; debounced if the delay prop is > 0.\n   * @arg {string} newValue the new value\n   */\n  'change',\n  /**\n   * @ignore\n   */\n  'update:modelValue',\n]);\nconst { value } = useChangeEmits(emit, props);\n</script>\n\n<style module lang=\"scss\">\n@import '../inputs';\n\n.input {\n  appearance: none;\n  -webkit-appearance: none;\n  width: 100%;\n  cursor: pointer;\n}\n\n.wrapper {\n  position: relative;\n\n  & > .arrow {\n    position: absolute;\n    top: 0;\n    right: 1em;\n    bottom: 0;\n    margin: auto;\n    padding-left: 1em;\n    pointer-events: none;\n    cursor: pointer;\n  }\n}\n</style>\n"],"names":["componentId","subId","useComponentId","dropdownOptions","computed","outputOptions","props","o","value","useChangeEmits","emit"],"mappings":"+kCA0EM,CAAE,YAAAA,EAAa,MAAAC,GAAUC,IAEzBC,EAAkBC,EAAS,IAAM,CACrC,IAAIC,EAAgB,CAAA,EACpB,OAAAC,EAAM,QAAQ,QAASC,GAAM,CACvB,OAAOA,GAAM,SACfF,EAAc,KAAK,CAAE,MAAOE,EAAE,MAAO,MAAOA,EAAE,KAAK,CAAE,EAErDF,EAAc,KAAK,CAAE,MAAOE,EAAG,MAAOA,CAAC,CAAE,CAE/C,CAAG,EACMF,CACT,CAAC,EAaK,CAAE,MAAAG,CAAK,EAAKC,EAAeC,EAAMJ,CAAK"}