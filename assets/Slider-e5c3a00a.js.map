{"version":3,"file":"Slider-e5c3a00a.js","sources":["../../src/components/inputs/slider/Slider.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      $style.grid,\n      $style[`grid--${labelPosition}`],\n      $style[`wrapper--value-label-${valueLabelPosition}`],\n    ]\"\n    :id=\"componentId\"\n  >\n    <label\n      v-if=\"label && labelPosition !== 'none'\"\n      :class=\"[$style.label, $style[`label--${labelPosition}`]]\"\n      :for=\"subId('slider')\"\n    >\n      {{ label }}\n    </label>\n    <div :class=\"$style.slider\" @wheel=\"onScroll\">\n      <span :class=\"$style.track\"></span>\n      <span\n        :class=\"[$style.track, $style['track--active']]\"\n        :style=\"activeTrackStyle\"\n      ></span>\n      <span\n        :class=\"[\n          $style.valueLabel,\n          $style[`valueLabel--${valueLabelPosition}`],\n        ]\"\n        :style=\"{ left: `${handlePosition.label}%` }\"\n        ref=\"valueLabel\"\n        tabindex=\"0\"\n        >{{ valueLabelText }}</span\n      >\n      <input\n        type=\"range\"\n        :min=\"min\"\n        :max=\"max\"\n        :step=\"step\"\n        :id=\"subId('slider')\"\n        :class=\"$style.input\"\n        v-model=\"value\"\n        ref=\"slider\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useComponentId } from '../../utils/compid.js';\nimport { useChangeEmits } from '../common.js';\nimport { computed, ref, watch } from 'vue';\nimport { onKeyStroke, useFocusWithin, useFocus } from '@vueuse/core';\n\nconst props = defineProps({\n  /**\n   * @model\n   */\n  modelValue: {\n    type: Number,\n  },\n  /**\n   * Text for the input label.\n   */\n  label: {\n    type: String,\n    default: 'Range',\n  },\n  /**\n   * Position of the input label (or none).\n   * @values left, right, above, below, none\n   */\n  labelPosition: {\n    type: String,\n    default: 'above',\n  },\n  /**\n   * Debounce delay for the `change` event, in ms.\n   */\n  delay: {\n    type: Number,\n    default: 200,\n  },\n  /**\n   * Number to set the slider at initially.\n   */\n  placeholder: {\n    type: [Number, undefined],\n    default: null,\n  },\n  /**\n   * The lowest number displayed on the slider.\n   */\n  min: {\n    type: Number,\n    default: 0,\n  },\n  /**\n   * The highest number displayed on the slider.\n   */\n  max: {\n    type: Number,\n    default: 100,\n  },\n  /**\n   * The granularity of accepted values; e.g. 1 allows any integer and 0.1 allows floats to one decimal place.\n   */\n  step: {\n    type: Number,\n    default: 1,\n  },\n  /**\n   * The fraction along the bar to set the value initially (as opposed to setting an explicit number); e.g. 0.5 sets an initial value halfway along the bar.\n   */\n  placeholderPosition: {\n    type: Number,\n    default: 0.5,\n  },\n  /**\n   * The position of the dynamic label displaying the current value (above or below the slider).\n   * @values above, below\n   */\n  valueLabelPosition: {\n    type: String,\n    default: 'below',\n  },\n  /**\n   * Do not allow values below this value; the handle will stop at this point, even if the `min` is lower than this.\n   */\n  validMin: {\n    type: Number,\n    default: null,\n  },\n  /**\n   * Do not allow values above this point; the handle will stop at this point, even if the `max` is higher than this.\n   */\n  validMax: {\n    type: Number,\n    default: null,\n  },\n  /**\n   * Highlight the track to the right of the handle rather than the left.\n   */\n  activeTrackRight: {\n    type: Boolean,\n    default: false,\n  },\n});\n\nconst { componentId, subId } = useComponentId();\n\nconst emit = defineEmits([\n  /**\n   * Emitted when the value changes; debounced if the delay prop is > 0.\n   * @arg {number} newValue the new value\n   */\n  'change',\n  /**\n   * @ignore\n   */\n  'update:modelValue',\n]);\nconst { value } = useChangeEmits(emit, props);\n\n// REFS\nconst slider = ref(null);\nconst valueLabel = ref(null);\n\n// PROP PROCESSING\nconst _validMin = computed(() => {\n  // set validMin to the min if not set\n  if (!props.validMin) {\n    return Number(props.min);\n  }\n  return Math.max(Number(props.validMin), Number(props.min));\n});\nconst _validMax = computed(() => {\n  // set validMax to the max if not set\n  if (!props.validMax) {\n    return Number(props.max);\n  }\n  return Math.min(Number(props.validMax), Number(props.max));\n});\n\n// STATE\nconst sliderFocus = useFocusWithin(slider);\nconst labelFocus = useFocus(valueLabel);\n\nconst valueLabelText = computed(() => {\n  // prevents the label flickering when trying to move it beyond its bounds\n  if (value.value < _validMin.value) {\n    return _validMin.value;\n  } else if (value.value > _validMax.value) {\n    return _validMax.value;\n  } else {\n    return value.value;\n  }\n});\n\nconst activeTrackStyle = computed(() => {\n  if (props.activeTrackRight) {\n    return { left: `${handlePosition.value.handle}%` };\n  } else {\n    return { right: `${100 - handlePosition.value.handle}%` };\n  }\n});\n\nconst fraction = computed(() => {\n  return (value.value - props.min) / (props.max - props.min);\n});\n\nconst handlePosition = computed(() => {\n  return getHandlePosition();\n});\n\n// FUNCTIONS\nfunction getHandlePosition() {\n  // the center of the slider is slightly offset to account for the size of the\n  // handle. this calculates the position of the middle of the handle along the\n  // track, accounting for the offset.\n  try {\n    const trackWidth = slider.value.clientWidth;\n    const handleWidth = 24; // set in CSS; including border!\n\n    // force update the inner text before the label width is calculated\n    if (valueLabel.value) {\n      valueLabel.value.innerText = valueLabelText.value;\n    }\n    const labelWidth = valueLabel.value ? valueLabel.value.clientWidth : 0;\n\n    const halfTrack = trackWidth / 2;\n    const currentPosition = fraction.value * trackWidth;\n    const centerOffset = (currentPosition - halfTrack) / halfTrack;\n    const offset = centerOffset * (handleWidth / 2);\n    const labelOffset = offset + labelWidth / 2;\n    const percentOffset = offset / trackWidth;\n    return {\n      handle: ((fraction.value - percentOffset) * 100).toFixed(2),\n      label: ((fraction.value - labelOffset / trackWidth) * 100).toFixed(2),\n    };\n  } catch {\n    // in case we can't get the clientWidth\n    const pos = fraction.value * 100;\n    return { handle: pos.toFixed(2), label: pos.toFixed(2) };\n  }\n}\n\nfunction getInitialValue() {\n  if (props.placeholder !== null && props.placeholder !== undefined) {\n    return props.placeholder;\n  }\n  let range = props.max - props.min;\n  let exactMidpoint = range / (1 / props.placeholderPosition);\n  let stepDeviation = exactMidpoint % props.step;\n  let stepMidpoint = exactMidpoint - stepDeviation;\n  return stepMidpoint + props.min;\n}\n\nfunction stepUp() {\n  if (value.value === props.max) {\n    return;\n  }\n  let newValue = Number(value.value) + Number(props.step);\n  if (newValue > props.max) {\n    value.value = props.max;\n  } else {\n    value.value = newValue;\n  }\n}\n\nfunction stepDown() {\n  if (value.value === props.min) {\n    return;\n  }\n  let newValue = Number(value.value) - Number(props.step);\n  if (newValue < props.min) {\n    value.value = props.min;\n  } else {\n    value.value = newValue;\n  }\n}\n\nfunction onScroll(event) {\n  event.preventDefault();\n  if (event.wheelDelta > 0) {\n    stepUp();\n  } else if (event.wheelDelta < 0) {\n    stepDown();\n  }\n}\n\n// KEYBINDINGS\nonKeyStroke('ArrowDown', (event) => {\n  event.preventDefault();\n  if (sliderFocus.focused.value || labelFocus.focused.value) {\n    stepDown();\n  }\n});\nonKeyStroke('ArrowLeft', (event) => {\n  event.preventDefault();\n  if (sliderFocus.focused.value || labelFocus.focused.value) {\n    stepDown();\n  }\n});\nonKeyStroke('ArrowUp', (event) => {\n  event.preventDefault();\n  if (sliderFocus.focused.value || labelFocus.focused.value) {\n    stepUp();\n  }\n});\nonKeyStroke('ArrowRight', (event) => {\n  event.preventDefault();\n  if (sliderFocus.focused.value || labelFocus.focused.value) {\n    stepUp();\n  }\n});\n\n// WATCHES\nwatch(value, (newValue) => {\n  // don't let the value exceed the valid min/max\n  if (Number(newValue) >= Number(_validMax.value)) {\n    value.value = _validMax.value;\n  }\n  if (Number(newValue) <= Number(_validMin.value)) {\n    value.value = _validMin.value;\n  }\n});\n\n// set an initial value\nvalue.value = getInitialValue();\n</script>\n\n<style module lang=\"scss\">\n@import '../inputs';\n\n$handleSize: 20px;\n$handleBorder: 2px;\n\n.wrapper--value-label-below {\n  margin-bottom: 35px;\n}\n\n.wrapper--value-label-above {\n  margin-top: 35px;\n}\n\n.input {\n  appearance: none;\n  -webkit-appearance: none;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n  background: transparent;\n  border: none;\n  outline: 0;\n  padding: 0;\n  margin: 0;\n  position: absolute;\n\n  &::-webkit-slider-thumb,\n  &::-moz-range-thumb {\n    appearance: none;\n    -webkit-appearance: none;\n    width: $handleSize;\n    height: $handleSize;\n    background: $primary;\n    cursor: pointer;\n    border-radius: 100%;\n    z-index: 100;\n    border: $handleBorder solid $grey;\n  }\n}\n\n.slider {\n  position: relative;\n  height: $handleSize + ($handleBorder * 2);\n}\n\n.track {\n  position: absolute;\n  height: 10px;\n  margin: auto;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  border-radius: $rounding;\n  background: $grey;\n\n  &.track--active {\n    background: $secondary;\n  }\n}\n\n.valueLabel {\n  position: absolute;\n  font-size: 0.8em;\n  padding: $half-pad;\n  border: 1px solid $grey;\n  border-radius: $rounding;\n  background: white;\n  height: 30px;\n\n  &.valueLabel--below {\n    top: $handleSize + ($handleBorder * 2) + 5px;\n  }\n\n  &.valueLabel--above {\n    bottom: $handleSize + ($handleBorder * 2) + 5px;\n  }\n}\n</style>\n"],"names":["componentId","subId","useComponentId","value","useChangeEmits","emit","props","slider","ref","valueLabel","_validMin","computed","_validMax","sliderFocus","useFocusWithin","labelFocus","useFocus","valueLabelText","activeTrackStyle","handlePosition","fraction","getHandlePosition","trackWidth","handleWidth","labelWidth","halfTrack","offset","labelOffset","percentOffset","pos","getInitialValue","exactMidpoint","stepDeviation","stepUp","newValue","stepDown","onScroll","event","onKeyStroke","watch"],"mappings":"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"}